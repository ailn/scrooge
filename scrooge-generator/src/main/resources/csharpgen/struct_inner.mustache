public {{#is_final}}sealed {{/is_final}}class {{name}} : {{#is_exception}}Exception, {{/is_exception}}TBase, IComparable<{{name}}>
{
    {{#i_4}}{{>generate_struct_desc}}{{/i_4}}
    {{#i_4}}{{>generate_field_descs}}{{/i_4}}

    {{#fields}}
    public {{{field_type.type_name}}} {{name}};
    {{/fields}}

    {{#i_4}}{{>generate_field_name_constants}}{{/i_4}}

    {{#consolidate_newlines}}
    {{#has_fields}}
    // isset id assignments
    {{/has_fields}}
    {{#non_nullable_fields}}
    static readonly int {{#isset_field_id}}{{name}}{{/isset_field_id}} = {{i}};
    {{/non_nullable_fields}}
    {{#has_non_nullable_fields}}
    BitArray __isset_bit_vector = new BitArray({{non_nullable_fields.size}});
    {{/has_non_nullable_fields}}
    {{/consolidate_newlines}}

    {{#i_4}}{{>generate_csharp_meta_data_map}}{{/i_4}}
    static {{name}}()
    {
        FieldMetaData.AddStructMetaDataMap(typeof({{name}}), MetaDataMap);
    }

    public {{name}}()
    {
        {{#consolidate_newlines}}
        {{#default_fields}}
        {{{print_const}}}
        {{/default_fields}}
        {{/consolidate_newlines}}
    }

    {{#non_default_constructor}}
    public {{name}}(
      {{#non_optional_fields}}
      {{{field_type.type_name}}} {{name}}{{^last}},{{/last}}{{#last}}) : this(){{/last}}
      {{/non_optional_fields}}
    {
        {{#non_optional_fields}}
        this.{{name}} = {{name}};
        {{^field_type.nullable}}
        Set{{#cap}}{{name}}{{/cap}}IsSet(true);
        {{/field_type.nullable}}
        {{/non_optional_fields}}
    }
    {{/non_default_constructor}}

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public {{name}}({{name}} other)
    {
        {{#has_bit_vector}}
        __isset_bit_vector.SetAll(false);
        __isset_bit_vector.Or(other.__isset_bit_vector);
        {{/has_bit_vector}}
        {{#consolidate_newlines}}
        {{#fields}}

        {{#field_type.nullable}}
        if (other.{{>generate_isset_check}}) {
        {{/field_type.nullable}}
        {{#field.i_if_nullable}}
        {{#field_type.is_container}}
        {{{generate_deep_copy_container}}}
        this.{{name}} = __this__{{name}};
        {{/field_type.is_container}}
        {{^field_type.is_container}}
        this.{{name}} = {{{generate_deep_copy_non_container}}};
        {{/field_type.is_container}}
        {{/field.i_if_nullable}}

        {{#field_type.nullable}}
        }
        {{/field_type.nullable}}

        {{/fields}}
        {{/consolidate_newlines}}
    }

    public {{name}} DeepCopy()
    {
        return new {{name}}(this);
    }

    public void Clear()
    {
        {{#fields}}
        {{#consolidate_newlines}}
        {{#field.default}}
        {{{print_const}}}
        {{/field.default}}

        {{^field.default}}
        {{#field_type.nullable}}
        this.{{name}} = null;
        {{/field_type.nullable}}
        {{^field_type.nullable}}
        Set{{#cap}}{{name}}{{/cap}}IsSet(false);
        {{#field_type.double}}
        this.{{name}} = 0.0;
        {{/field_type.double}}
        {{#field_type.boolean}}
        this.{{name}} = false;
        {{/field_type.boolean}}
        {{#field_type.base_int_type}}
        this.{{name}} = 0;
        {{/field_type.base_int_type}}
        {{/field_type.nullable}}
        {{/field.default}}
        {{/consolidate_newlines}}
        {{/fields}}
    }

    {{#fields}}
    {{#field_type.is_container}}
    public int get{{#cap}}{{name}}{{/cap}}Count()
    {
        return (this.{{name}} == null) ? 0 : this.{{name}}.Count;
    }

    {{/field_type.is_container}}
    {{#field_type.is_list_or_set}}
    public IEnumerator<{{{elem_type.type_name_in_container}}}> Get{{#cap}}{{name}}{{/cap}}Enumerator()
    {
        return (this.{{name}} == null) ? null : this.{{name}}.GetEnumerator();
    }

    public void AddTo{{#cap}}{{name}}{{/cap}}({{{elem_type.type_name}}} elem)
    {
        if (this.{{name}} == null)
        {
          this.{{name}} = {{{field_type.init_field}}};
        }
        this.{{name}}.Add(elem);
    }

    {{/field_type.is_list_or_set}}
    {{#field_type.map_types}}
    public void PutTo{{#cap}}{{name}}{{/cap}}({{{key_type.type_name}}} key, {{{value_type.type_name}}} val)
    {
        if (this.{{name}} == null)
        {
            this.{{name}} = new {{{field_type.init_type_name}}}();
        }
        this.{{name}}.Add(key, val);
    }

    {{/field_type.map_types}}
    {{#field_type.is_binary}}
    public byte[] Get{{#cap}}{{name}}{{/cap}}()
    {
        set{{#cap}}{{name}}{{/cap}}(TBaseHelper.rightSize({{name}}));
        return {{name}};
    }

    {{/field_type.is_binary}}
    {{^field_type.is_binary}}
    public {{{field_type.type_name}}} {{#field_type.boolean}}is{{/field_type.boolean}}{{^field_type.boolean}}get{{/field_type.boolean}}{{#cap}}{{name}}{{/cap}}()
    {
        return this.{{name}};
    }

    {{/field_type.is_binary}}
    {{#field_type.is_binary}}
    public {{struct_type_name}} Set{{#cap}}{{name}}{{/cap}}(byte[] {{name}})
    {
        set{{#cap}}{{name}}{{/cap}}(ByteBuffer.wrap({{name}}));
        return this;
    }

    {{/field_type.is_binary}}
    public {{struct_type_name}} Set{{#cap}}{{name}}{{/cap}}({{{field_type.type_name}}} {{name}})
    {
        this.{{name}} = {{name}};
        {{>generate_isset_set}}
        return this;
    }

    public void Unset{{#cap}}{{name}}{{/cap}}()
    {
        {{#field_type.nullable}}
          this.{{name}} = null;
        {{/field_type.nullable}}
        {{^field_type.nullable}}
        __isset_bit_vector.Set({{#isset_field_id}}{{name}}{{/isset_field_id}}, false);
        {{/field_type.nullable}}
    }

    /** Returns true if field {{name}} is set (has been asigned a value) and false otherwise */
    public bool IsSet{{#cap}}{{name}}{{/cap}}()
    {
        {{#field_type.nullable}}
        return this.{{name}} != null;
        {{/field_type.nullable}}
        {{^field_type.nullable}}
        return __isset_bit_vector.Get({{#isset_field_id}}{{name}}{{/isset_field_id}});
        {{/field_type.nullable}}
    }

    public void Set{{#cap}}{{name}}{{/cap}}IsSet(bool value)
    {
        {{#field_type.nullable}}
        if (!value)
        {
            this.{{name}} = null;
        }
        {{/field_type.nullable}}
        {{^field_type.nullable}}
        __isset_bit_vector.Set({{#isset_field_id}}{{name}}{{/isset_field_id}}, value);
        {{/field_type.nullable}}
    }

    {{/fields}}
    public void SetFieldValue(_Fields field, object value)
    {
        switch (field.ThriftId)
        {
            {{#fields}}
            {{#consolidate_newlines}}
            case {{key}}: // {{name}}
                if (value == null)
                {
                    this.Unset{{#cap}}{{name}}{{/cap}}();
                }
                else
                {
                    this.Set{{#cap}}{{name}}{{/cap}}(({{{field_type.type_name_in_container}}})value);
                }
                break;
            {{/consolidate_newlines}}
            {{/fields}}
        }
    }

    public object GetFieldValue(_Fields field)
    {
        switch (field.ThriftId)
        {
            {{#fields}}
            {{#consolidate_newlines}}
            case {{key}}: // {{name}}
                return get{{#cap}}{{name}}{{/cap}}();
            {{/consolidate_newlines}}
            {{/fields}}
        }
        throw new InvalidOperationException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public bool IsSet(_Fields field)
    {
        if (field == null)
        {
            throw new ArgumentException();
        }

        switch (field.ThriftId)
        {
            {{#fields}}
            {{#consolidate_newlines}}
            case {{key}}: // {{name}}
                return {{>generate_isset_check}};
            {{/consolidate_newlines}}
            {{/fields}}
        }
        throw new InvalidOperationException();
    }

    public override bool Equals(object that)
    {
        if (that == null)
            return false;
        if (that is {{struct_type_name}})
            return this.Equals(({{struct_type_name}})that);
        return false;
    }

    public bool Equals({{struct_type_name}} that)
    {
        if (that == null)
            return false;
        {{#fields}}
        {{#consolidate_newlines}}
        bool this_present_{{name}} = true{{#field_type.nullable}} && this.{{>generate_isset_check}}{{/field_type.nullable}}{{^field_type.nullable}}{{#field.optional}} && this.{{>generate_isset_check}}{{/field.optional}}{{/field_type.nullable}};
        bool that_present_{{name}} = true{{#field_type.nullable}} && that.{{>generate_isset_check}}{{/field_type.nullable}}{{^field_type.nullable}}{{#field.optional}} && that.{{>generate_isset_check}}{{/field.optional}}{{/field_type.nullable}};
        if (this_present_{{name}} || that_present_{{name}})
        {
            if (!(this_present_{{name}} && that_present_{{name}}))
                return false;
            if ({{#trim}}
              {{#field_type.is_binary}}
              !this.{{name}}.Equals(that.{{name}})
              {{/field_type.is_binary}}
              {{^field_type.is_binary}}{{#field_type.nullable}}
              !this.{{name}}.Equals(that.{{name}})
              {{/field_type.nullable}}{{/field_type.is_binary}}
              {{^field_type.is_binary}}{{^field_type.nullable}}
              this.{{name}} != that.{{name}}
              {{/field_type.nullable}}{{/field_type.is_binary}}
              ){{/trim}}
                return false;
        }
        {{/consolidate_newlines}}
        {{/fields}}

        return true;
    }

    {{# gen_hash_code }}
    public override int GetHashCode()
    {
        {{#gen_hash_code}}
        HashCodeBuilder builder = new HashCodeBuilder();
        {{#fields}}
        bool present_{{name}} = true{{#optional_or_nullable}} && ({{>generate_isset_check}}){{/optional_or_nullable}};
        builder.append(present_{{name}});
        if (present_{{name}})
            builder.append({{name}}{{#field_type.is_enum}}.getValue(){{/field_type.is_enum}});
        {{/fields}}
        return builder.toHashCode();
        {{/gen_hash_code}}
        {{^gen_hash_code}}
        return 0;
        {{/gen_hash_code}}
    }
    {{/ gen_hash_code }}

    public int CompareTo({{struct_type_name}} other)
    {
        if (!this.GetType().Equals(other.GetType()))
        {
            return this.GetType().FullName.CompareTo(other.GetType().FullName);
        }

        int lastComparison = 0;
        {{struct_type_name}} typedOther = ({{struct_type_name}})other;

        {{#fields}}
        lastComparison = Convert.ToInt32({{>generate_isset_check}}).CompareTo(typedOther.{{>generate_isset_check}});
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if ({{>generate_isset_check}})
        {
            lastComparison = TBaseHelper.CompareTo(this.{{name}}, typedOther.{{name}});
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        {{/fields}}
        return 0;
    }

    {{#i_4}}{{>generate_csharp_struct_field_by_id}}{{/i_4}}

    public void Read(TProtocol iprot)
    {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop)
            {
                break;
            }
            switch (field.ID)
            {
                {{#fields}}
                case {{key}}: // {{#constant_name}}{{name}}{{/constant_name}}
                    if (field.Type == {{field_type.to_enum}})
                    {
                        {{#consolidate_newlines}}
                        {{#i_4}}{{{deserialize_field}}}{{/i_4}}
                        {{>generate_isset_set}}
                        {{/consolidate_newlines}}
                    }
                    else
                    {
                        TProtocolUtil.Skip(iprot, field.Type);
                    }
                    break;
                {{/fields}}
                default:
                    TProtocolUtil.Skip(iprot, field.Type);
                    break;
            }
            iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        {{#consolidate_newlines}}
        {{#fields}}
        {{#field.required}}{{^field_type.nullable}}
        if (!{{>generate_isset_check}})
        {
            throw new TProtocolException("Required field '{{name}}' was not found in serialized data! Struct: " + toString());
        }
        {{/field_type.nullable}}{{/field.required}}
        {{/fields}}
        {{/consolidate_newlines}}
        this.Validate();
    }

    {{#consolidate_newlines}}
    {{#is_result}}
    public void Write(TProtocol oprot)
    {
        oprot.WriteStructBegin(STRUCT_DESC);
        {{#fields}}
        {{#first}}if{{/first}}{{^first}}} else if{{/first}} (this.{{>generate_isset_check}})
        {
            oprot.WriteFieldBegin({{#constant_name}}{{name}}{{/constant_name}}_FIELD_DESC);
            {{#i_4}}{{{serialize_field}}}{{/i_4}}
            oprot.WriteFieldEnd();
        {{#last}}}{{/last}}
        {{/fields}}
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
    }
    {{/is_result}}
    {{^is_result}}
    public void Write(TProtocol oprot)
    {
        this.Validate();
        <br/>
        oprot.WriteStructBegin(STRUCT_DESC);
        {{#sorted_fields}}
        {{#field_type.nullable}}
        if (this.{{name}} != null)
        {
            {{/field_type.nullable}}

            {{#field.i_if_nullable}}
            {{#field.optional}}
            if ({{>generate_isset_check}})
            {
                {{/field.optional}}

                {{#field.i_if_optional}}
                oprot.WriteFieldBegin({{#constant_name}}{{name}}{{/constant_name}}_FIELD_DESC);

                {{#i_4}}{{{serialize_field}}}{{/i_4}}

                oprot.WriteFieldEnd();

                {{/field.i_if_optional}}

                {{#field.optional}}
            }
            {{/field.optional}}
            {{/field.i_if_nullable}}

            {{#field_type.nullable}}
        }
        {{/field_type.nullable}}
        {{/sorted_fields}}

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
    }
    {{/is_result}}
    {{/consolidate_newlines}}

    public override string ToString()
    {
        {{#consolidate_newlines}}
        var sb = new StringBuilder("{{name}}(");
        bool first = true;

        {{#fields}}
        {{#field.optional}}
        if ({{>generate_isset_check}})
        {
            {{/field.optional}}
            {{#field.i_if_optional}}
            {{^first}}
            if (!first) sb.Append(", ");
            {{/first}}
            sb.Append("{{name}}:");
            {{#field_type.nullable}}
            if (this.{{name}} == null)
            {
                sb.Append("null");
            }
            else
            {
                {{/field_type.nullable}}

                {{#field.i_if_nullable}}
                {{#field_type.is_binary}}
                TBaseHelper.ToString(this.{{name}}, sb);
                {{/field_type.is_binary}}
                {{^field_type.is_binary}}
                sb.Append(this.{{name}});
                {{/field_type.is_binary}}
                {{/field.i_if_nullable}}

                {{#field_type.nullable}}
            }
            {{/field_type.nullable}}
            first = false;
            {{#field.optional}}
        }
        {{/field.optional}}
        {{/field.i_if_optional}}
        {{/fields}}
        sb.Append(")");
        return sb.ToString();
        {{/consolidate_newlines}}
    }

    public void Validate()
    {
        {{#consolidate_newlines}}
        // check for required fields
        {{#fields}}
        {{#field.required}}
        {{#field_type.nullable}}
        if ({{name}} == null)
        {
            throw new TProtocolException("Required field '{{name}}' was not present! Struct: " + this.ToString());
        }
        {{/field_type.nullable}}
        {{^field_type.nullable}}
        // alas, we cannot check '{{name}}' because it's a primitive and you chose the non-beans generator.
        {{/field_type.nullable}}
        {{/field.required}}
        {{/fields}}
        {{/consolidate_newlines}}
    }
}
